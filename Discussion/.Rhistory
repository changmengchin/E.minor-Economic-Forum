which(is.na(mean.ab.by.subject[1,]))
mean.ab.by.subject[1,c(23,24,37)]
head(sort.result$x)
head(sort.result$ix)
max(sort.result$ix)
rbind(mean.ab=mean.ab.each.class,
num.obs=num.obs.each.class)-> mean.ab.by.subject
sort.result<-sort.int(
as.numeric(mean.ab.by.subject[1,]),
index.return = TRUE)
library(knitr)
library(magrittr)
mean.ab.by.subject[.,order(mean.ab)]
mean.ab.by.subject[.,order(mean.ab.by.subject$mean.ab)]
rbind(mean.ab=mean.ab.each.class,
num.obs=num.obs.each.class)-> mean.ab.by.subject<-data.frame(
mean.ab=mean.ab.each.class,
num.obs=num.obs.each.class
)
mean.ab.by.subject<-data.frame(
mean.ab=mean.ab.each.class,
num.obs=num.obs.each.class
)
View(mean.ab.by.subject)
class(mean.ab.by.each.class)
class(mean.ab.each.class)
dim(mean.ab.each.class)
as.matrix(mean.ab.each.class)
mean.ab.by.subject<-data.frame(
mean.ab=as.matrix(mean.ab.each.class),
num.obs=as.matrix(num.obs.each.class)
)
View(mean.ab.by.subject)
View(mean.ab.by.subject)
class.name<-colnames(mean.ab.each.class)
c(mean.ab.each.class)
as.vector(mean.ab.each.class)
mean.ab.by.subject<-data.frame(
mean.ab=as.vector(mean.ab.each.class),
num.obs=as.vector(num.obs.each.class)
)
dim(mean.ab.each.class)
mean.ab.by.subject<-data.frame(
mean.ab=as.numeric(mean.ab.each.class),
num.obs=as.integer(num.obs.each.class)
)
View(mean.ab.by.subject)
mean.ab.by.subject<-data.frame(
mean.ab=as.numeric(mean.ab.each.class),
num.obs=as.integer(num.obs.each.class)
row.names = class.name)
mean.ab.by.subject<-data.frame(
mean.ab=as.numeric(mean.ab.each.class),
num.obs=as.integer(num.obs.each.class),
row.names = class.name
)
View(mean.ab.by.subject)
mean.ab.by.subject[order(mean.ab),]
mean.ab.by.subject[
order(mean.ab.by.subject$mean.ab),]
order(mean.ab.by.subject$mean.ab),] %>% kable
mean.ab.by.subject[
order(mean.ab.by.subject$mean.ab),] %>% kable
q()
knitr::opts_chunk$set(echo = FALSE, message = F)
rm(list=ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
working.path<-"~/Desktop/Dropbox/Github/IR-research/Data/" #"~/Desktop/Dropbox/IR/Programs/201608/"
# load original data
working.path<-"~/Dropbox/Github/IR-research/Data/" #new macbook pro
load(paste(working.path,'data irt all.Rdata'))
# load ability data
load.file<-paste(working.path,'student ability.Rdata')
load(load.file)
raw.data %>% group_by(ID) %>%
dplyr::summarise(gpa.all=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
raw.data %>% filter(Required != '通') %>% group_by(ID) %>%
dplyr::summarise(gpa.noGE=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
raw.data %>% group_by(ID) %>%
dplyr::summarise(gpa.econ=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
irt.out %>% gather(gpa.type,gpa,c(2:4)) -> irt.out.long
# 綜合能力分配
irt.out %>% ggplot(aes(x=ab))+
geom_density()+
labs(x='能力水準', y='')+
ggtitle('經濟綜合能力分配')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
# 圖: 能力與成績
irt.out.long %>% ggplot(aes(x=gpa,y=ab,color=gpa.type)) +
geom_point()+
ggtitle('經濟綜合能力與成績')+
scale_color_discrete(labels=c('全部','經濟專業','排除通識'))+
labs(x='平均成績',y='能力水準',color='課程範圍')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
# 圖: 能力與成績
irt.out.long %>% filter(gpa.type %in% c("gpa.noGE","gpa.econ")) %>%
ggplot(aes(x=gpa,y=ab,color=gpa.type)) +
geom_point()+
ggtitle('經濟綜合能力與成績')+
scale_color_discrete(labels=c('經濟專業','全部(不含通識）'))+
labs(x='平均成績',y='能力水準',color='課程範圍')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
data.irt %>% left_join(irt.out.long,by=c("ID")) -> data.irt.ab
data.irt.ab %>% filter(!is.na(ab)) -> data.irt.ab2
data.irt.ab2[,2:543]*data.irt.ab2$ab->ability.each.class
#library(knitr)
#kable(ability.each.class)
ability.each.class %>%
summarise_all(funs(mean),na.rm=TRUE) ->
mean.ab.each.class
valid.n<-function(x){
length(x)-sum(is.na(x))
}
ability.each.class %>%
summarise_all(funs(valid.n)) ->
num.obs.each.class
class.name<-colnames(mean.ab.each.class)
mean.ab.by.subject<-data.frame(
mean.ab=as.numeric(mean.ab.each.class),
num.obs=as.integer(num.obs.each.class),
row.names = class.name
)
mean.ab.by.subject[
order(mean.ab.by.subject$mean.ab),] %>% kable
library(knitr)
kable(mean.ab.by.subject)
knitr::opts_chunk$set(echo = FALSE, message = F)
rm(list=ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
working.path<-"~/Desktop/Dropbox/Github/IR-research/Data/" #"~/Desktop/Dropbox/IR/Programs/201608/"
# load original data
working.path<-"~/Dropbox/Github/IR-research/Data/" #new macbook pro
load(paste(working.path,'data irt all.Rdata'))
# load ability data
load.file<-paste(working.path,'student ability.Rdata')
load(load.file)
raw.data %>% group_by(ID) %>%
dplyr::summarise(gpa.all=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
raw.data %>% filter(Required != '通') %>% group_by(ID) %>%
dplyr::summarise(gpa.noGE=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
raw.data %>% group_by(ID) %>%
dplyr::summarise(gpa.econ=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
irt.out %>% gather(gpa.type,gpa,c(2:4)) -> irt.out.long
# 綜合能力分配
irt.out %>% ggplot(aes(x=ab))+
geom_density()+
labs(x='能力水準', y='')+
ggtitle('經濟綜合能力分配')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
# 圖: 能力與成績
irt.out.long %>% ggplot(aes(x=gpa,y=ab,color=gpa.type)) +
geom_point()+
ggtitle('經濟綜合能力與成績')+
scale_color_discrete(labels=c('全部','經濟專業','排除通識'))+
labs(x='平均成績',y='能力水準',color='課程範圍')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
# 圖: 能力與成績
irt.out.long %>% filter(gpa.type %in% c("gpa.noGE","gpa.econ")) %>%
ggplot(aes(x=gpa,y=ab,color=gpa.type)) +
geom_point()+
ggtitle('經濟綜合能力與成績')+
scale_color_discrete(labels=c('經濟專業','全部(不含通識）'))+
labs(x='平均成績',y='能力水準',color='課程範圍')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
data.irt %>% left_join(irt.out.long,by=c("ID")) -> data.irt.ab
data.irt.ab %>% filter(!is.na(ab)) -> data.irt.ab2
data.irt.ab2[,2:543]*data.irt.ab2$ab->ability.each.class
#library(knitr)
#kable(ability.each.class)
ability.each.class %>%
summarise_all(funs(mean),na.rm=TRUE) ->
mean.ab.each.class
valid.n<-function(x){
length(x)-sum(is.na(x))
}
ability.each.class %>%
summarise_all(funs(valid.n)) ->
num.obs.each.class
class.name<-colnames(mean.ab.each.class)
mean.ab.by.subject<-data.frame(
mean.ab=as.numeric(mean.ab.each.class),
num.obs=as.integer(num.obs.each.class),
row.names = class.name
)
mean.ab.by.subject[
order(mean.ab.by.subject$mean.ab),] %>% kable
sort.result<-sort.int(
as.numeric(mean.ab.by.subject[1,]),
index.return = TRUE)
library(knitr)
library(magrittr)
mean.ab.by.subject[.,order(mean.ab.by.subject$mean.ab)]->mean.ab.by.subject
mean.ab.by.subject
mean.ab.by.subject[.,order(mean.ab.by.subject$mean.ab)]->mean.ab.by.subject
mean.ab.by.subject[.,
order(mean.ab.by.subject$mean.ab)]->
mean.ab.by.subject
class.name<-colnames(mean.ab.each.class)
mean.ab.by.subject<-data.frame(
mean.ab=as.numeric(mean.ab.each.class),
num.obs=as.integer(num.obs.each.class),
row.names = class.name
)
mean.ab.by.subject[
order(mean.ab.by.subject$mean.ab),] %>% kable
rm(list=ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
working.path<-"~/Desktop/Dropbox/Github/IR-research/Data/" #"~/Desktop/Dropbox/IR/Programs/201608/"
# load original data
working.path<-"~/Dropbox/Github/IR-research/Data/" #new macbook pro
load(paste(working.path,'data irt all.Rdata'))
View(raw.data)
View(data.irt)
knitr::opts_chunk$set(echo = FALSE, message = F)
rm(list=ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
working.path<-"~/Desktop/Dropbox/Github/IR-research/Data/" #"~/Desktop/Dropbox/IR/Programs/201608/"
# load original data
working.path<-"~/Dropbox/Github/IR-research/Data/" #new macbook pro
load(paste(working.path,'data irt all.Rdata'))
# load ability data
load.file<-paste(working.path,'student ability.Rdata')
load(load.file)
raw.data %>% group_by(ID) %>%
dplyr::summarise(gpa.all=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
raw.data %>% filter(Required != '通') %>% group_by(ID) %>%
dplyr::summarise(gpa.noGE=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
raw.data %>% group_by(ID) %>%
dplyr::summarise(gpa.econ=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
irt.out %>% gather(gpa.type,gpa,c(2:4)) -> irt.out.long
# 綜合能力分配
irt.out %>% ggplot(aes(x=ab))+
geom_density()+
labs(x='能力水準', y='')+
ggtitle('經濟綜合能力分配')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
# 圖: 能力與成績
irt.out.long %>% ggplot(aes(x=gpa,y=ab,color=gpa.type)) +
geom_point()+
ggtitle('經濟綜合能力與成績')+
scale_color_discrete(labels=c('全部','經濟專業','排除通識'))+
labs(x='平均成績',y='能力水準',color='課程範圍')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
# 圖: 能力與成績
irt.out.long %>% filter(gpa.type %in% c("gpa.noGE","gpa.econ")) %>%
ggplot(aes(x=gpa,y=ab,color=gpa.type)) +
geom_point()+
ggtitle('經濟綜合能力與成績')+
scale_color_discrete(labels=c('經濟專業','全部(不含通識）'))+
labs(x='平均成績',y='能力水準',color='課程範圍')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
data.irt %>% left_join(irt.out.long,by=c("ID")) -> data.irt.ab
data.irt.ab %>% filter(!is.na(ab)) -> data.irt.ab2
data.irt.ab2[,2:543]*data.irt.ab2$ab->ability.each.class
#library(knitr)
#kable(ability.each.class)
ability.each.class %>%
summarise_all(funs(mean),na.rm=TRUE) ->
mean.ab.each.class
valid.n<-function(x){
length(x)-sum(is.na(x))
}
ability.each.class %>%
summarise_all(funs(valid.n)) ->
num.obs.each.class
class.name<-colnames(mean.ab.each.class)
mean.ab.by.subject<-data.frame(
mean.ab=as.numeric(mean.ab.each.class),
num.obs=as.integer(num.obs.each.class),
row.names = class.name
)
mean.ab.by.subject[
order(mean.ab.by.subject$mean.ab),] %>% kable
knitr::opts_chunk$set(echo = FALSE, message = F)
rm(list=ls())
library(dplyr)
library(tidyr)
library(ggplot2)
library(ggthemes)
working.path<-"~/Desktop/Dropbox/Github/IR-research/Data/" #"~/Desktop/Dropbox/IR/Programs/201608/"
# load original data
working.path<-"~/Dropbox/Github/IR-research/Data/" #new macbook pro
load(paste(working.path,'data irt all.Rdata'))
# load ability data
load.file<-paste(working.path,'student ability.Rdata')
load(load.file)
raw.data %>% group_by(ID) %>%
dplyr::summarise(gpa.all=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
raw.data %>% filter(Required != '通') %>% group_by(ID) %>%
dplyr::summarise(gpa.noGE=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
raw.data %>% group_by(ID) %>%
dplyr::summarise(gpa.econ=weighted.mean(grade,credit)) %>%
dplyr::right_join(irt.out,by='ID') -> irt.out
irt.out %>% gather(gpa.type,gpa,c(2:4)) -> irt.out.long
# 綜合能力分配
irt.out %>% ggplot(aes(x=ab))+
geom_density()+
labs(x='能力水準', y='')+
ggtitle('經濟綜合能力分配')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
# 圖: 能力與成績
irt.out.long %>% ggplot(aes(x=gpa,y=ab,color=gpa.type)) +
geom_point()+
ggtitle('經濟綜合能力與成績')+
scale_color_discrete(labels=c('全部','經濟專業','排除通識'))+
labs(x='平均成績',y='能力水準',color='課程範圍')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
# 圖: 能力與成績
irt.out.long %>% filter(gpa.type %in% c("gpa.noGE","gpa.econ")) %>%
ggplot(aes(x=gpa,y=ab,color=gpa.type)) +
geom_point()+
ggtitle('經濟綜合能力與成績')+
scale_color_discrete(labels=c('經濟專業','全部(不含通識）'))+
labs(x='平均成績',y='能力水準',color='課程範圍')+
theme_economist(base_family = 'cwTeX Q Yuan Medium')
data.irt %>% left_join(irt.out.long,by=c("ID")) -> data.irt.ab
data.irt.ab %>% filter(!is.na(ab)) -> data.irt.ab2
data.irt.ab2[,2:543]*data.irt.ab2$ab->ability.each.class
#library(knitr)
#kable(ability.each.class)
ability.each.class %>%
summarise_all(funs(mean),na.rm=TRUE) ->
mean.ab.each.class
valid.n<-function(x){
length(x)-sum(is.na(x))
}
ability.each.class %>%
summarise_all(funs(valid.n)) ->
num.obs.each.class
class.name<-colnames(mean.ab.each.class)
mean.ab.by.subject<-data.frame(
mean.ab=as.numeric(mean.ab.each.class),
num.obs=as.integer(num.obs.each.class),
row.names = class.name
)
mean.ab.by.subject[
order(mean.ab.by.subject$mean.ab),] %>% kable
mean.ab.by.subject %>% row.names()
mean.ab.by.subject %>% row.names() %>%
grep('張清富',.,value=FALSE)
mean.ab.by.subject %>% row.names() %>%
grep('張清富',.,value=FALSE) %>%
mean.ab.by.subject[.,]
teacher<-"張清富"
mean.ab.by.subject %>% row.names() %>%
grep(teacher,.,value=FALSE) %>%
mean.ab.by.subject[.,]
teacher<-"謝修"
mean.ab.by.subject %>% row.names() %>%
grep(teacher,.,value=FALSE) %>%
mean.ab.by.subject[.,]
teacher<-"陳孝琪"
mean.ab.by.subject %>% row.names() %>%
grep(teacher,.,value=FALSE) %>%
mean.ab.by.subject[.,]
mean.ab.by.subject %>% row.names() %>%
grep(teacher,.,value=FALSE) %>%
mean.ab.by.subject[.,] %>%
print(rownames(.))
mean.ab.by.subject %>% row.names() %>%
grep(teacher,.,value=FALSE) %>%
mean.ab.by.subject[.,] %>%
row.names
View(ability.each.class)
View(data.irt)
mean.ab.by.subject %>% row.names() %>%
grep(teacher,.,value=FALSE) %>%
mean.ab.by.subject[.,] %>%
row.names -> outcome
data.irt %>% select(outcome)
paste0(`,outcome[2],`)
outcome
paste0("`",outcome[2],
"`")
eval(parse(text='a=2'))
data.irt %>% select(outcome[2]) %>%
data.irt %>% select(outcome[2]) %>%
print
print
data.irt %>% select(outcome[2])
data.irt %>% select(outcome[1:2])
ability.each.class %>% select(outcome[1:2])
data.irt %>% select(outcome[1:2])
outcome
order(mean.ab.by.subject$mean.ab),] %>% kable
mean.ab.by.subject[
order(mean.ab.by.subject$mean.ab),] %>% kable
mean.ab.by.subject %>% row.names() %>%
grep(teacher,.,value=FALSE) %>%
mean.ab.by.subject[.,] #%>%
where(!is.na(data.irt.ab))
which(!is.na(data.irt.ab))
data.irt.ab %>% !is.na
data.irt.ab %>% function(x) !is.na(x)
data.irt.ab %>% is.na(x)
data.irt.ab %>% is.na(x)
data.irt.ab %>% is.na()
data.irt.ab %>% is.na
data.irt.ab %>% is.na %>% !
data.irt.ab2[,2:543]*data.irt.ab2$ab->ability.each.class
data.irt.ab %>% function(x) {!is.na(x)}
data.irt.ab %>% !is.na(.)
View(data.irt.ab)
data.irt.ab %>% is.logical
data.irt.ab %>% (function(x) !is.na(x))
data.irt.ab %>% (function(x) !is.na(x)) %>%
which %>% data.irt.ab[.]
data.irt.ab %>% (function(x) !is.na(x)) %>%
which
data.irt.ab[993]
q()
bookdown::publish_book()
bookdown::publish_book()
bookdown::publish_book()
bookdown::publish_book()
bookdown::publish_book()
q()
bookdown::publish_book()
q()
library(devtools)
#devtools::install_github("jogrue/RfacebookHelperFunctions")
# I also recommend updating these packages.
devtools::install_github("pablobarbera/Rfacebook/Rfacebook")
devtools::install_github("r-lib/httr")
#install.packages(c("devtools","httr"))
#library(devtools)
rm(list=ls())
library(Rfacebook)
library(httr)
#options("browser" = NULL)
fb_oauth <- fbOAuth(app_id="353100065161623",
app_secret="ae118c6447d3e8a1d2dbdd5b51ce1345")
save(fb_oauth, file="fb_oauth")
rm(list=ls())
load("fb_oauth")
ID<-'1792583217705728'
attending <- GET("https://graph.facebook.com/v2.11/1792583217705728/attending", config(token =fb_oauth))
stop_for_status(attending) #檢查是否有request errors
attending <- GET("https://graph.facebook.com/v2.11/1792583217705728/attending", config(token =fb_oauth))
stop_for_status(attending) #檢查是否有request errors
# library(Rfacebook)
# fb_oauth <- fbOAuth(app_id="", app_secret="", extended_permissions = TRUE)
# save(fb_oauth, file="fb_oauth")
# load("fb_oauth")
events <- getEvents(page="675099912682029", token="EAACEdEose0cBALzytu1s9XW6GKU4o8YMMucDCPazbg6lXoC5XsZBbzcLFV0ZAGwGdVdcgqA4ilVws2SB4932l19yHcbMfxmsRk3y2bmXbl71OM7Cy8KyXyh4uuyoqwhNxcs3Q5KQohuz8n12jB9ox8fCbRqKIxrgZAL4cxrOXKAdKAnIH4kyyWs3zx6HxcZD")
# library(Rfacebook)
# fb_oauth <- fbOAuth(app_id="", app_secret="", extended_permissions = TRUE)
# save(fb_oauth, file="fb_oauth")
# load("fb_oauth")
events <- getEvents(page="675099912682029", token=fb_oauth)
callAPI("https://graph.facebook.com/v2.11/1792583217705728/attending",token="EAACEdEose0cBAEcnatHjcbmUPCAmKnUon1ZCfmajd8yxvIfkQ37Q7jepNn40y0hQ9myx2ZCGJkfAxm5f5476yfNYXay0s6VJVw6aO0PXAesucH43fFTRfRY8VnOPAB5JFN6UBZA2ApELgPZBKc3v7OVYBos1nxA0K10ZAFTQYDTRHGPhExpmQjTEaisZBnXEEZD")
callAPI("https://graph.facebook.com/v2.11/1792583217705728/attending?",token="EAACEdEose0cBAEcnatHjcbmUPCAmKnUon1ZCfmajd8yxvIfkQ37Q7jepNn40y0hQ9myx2ZCGJkfAxm5f5476yfNYXay0s6VJVw6aO0PXAesucH43fFTRfRY8VnOPAB5JFN6UBZA2ApELgPZBKc3v7OVYBos1nxA0K10ZAFTQYDTRHGPhExpmQjTEaisZBnXEEZD")
callAPI("https://graph.facebook.com/v2.11/1792583217705728/attending?",token=fb_oauth)
#options("browser" = NULL)
fb_oauth <- fbOAuth(app_id="353100065161623",
app_secret="ae118c6447d3e8a1d2dbdd5b51ce1345",
extended_permissions = TRUE)
callAPI("https://graph.facebook.com/v2.11/1792583217705728/attending?",token=fb_oauth)
#options("browser" = NULL)
fb_oauth <- fbOAuth(app_id="353100065161623",
app_secret="ae118c6447d3e8a1d2dbdd5b51ce1345",
extended_permissions = TRUE,
scope=c("user_events","user_managed_groups"))
callAPI("https://graph.facebook.com/v2.11/1792583217705728/attending?",token=fb_oauth)
# library(Rfacebook)
# fb_oauth <- fbOAuth(app_id="", app_secret="", extended_permissions = TRUE)
# save(fb_oauth, file="fb_oauth")
# load("fb_oauth")
events <- getEvents(page="675099912682029", token=fb_oauth)
events$name
events %>% kable
library(dplyr)
events %>% kable
events <- getEvents(page="675099912682029", token=fb_oauth)
events %>% kable
library(knitr)
events %>% kable
events %>% select(id, name, attending_count)
events %>% select(id, name, attending_count) %>% kable
callAPI("https://graph.facebook.com/v2.11/1792583217705728/attending?",token=fb_oauth)
rm(list=ls())
library(dplyr)
library(knitr)
load("fb_oauth")
events <- getEvents(page="675099912682029", token=fb_oauth)
events %>% select(id, name, attending_count) %>% kable
callAPI("https://graph.facebook.com/v2.11/675099912682029/attending?",token=fb_oauth)
callAPI("https://graph.facebook.com/v2.11/1796576030634737/attending?",token=fb_oauth)
q()
